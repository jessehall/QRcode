import { SvelteComponent, init, safe_not_equal, element, attr, insert, noop, detach } from 'svelte/internal';
import QRious from 'qrious';

/* src/lib/index.svelte generated by Svelte v3.22.3 */

function create_fragment(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (img.src !== (img_src_value = /*image*/ ctx[1])) attr(img, "src", img_src_value);
			attr(img, "alt", "");
			attr(img, "class", /*className*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*className*/ 1) {
				attr(img, "class", /*className*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const QRcode = new QRious();
	let { errorCorrection = "L" } = $$props;
	let { background = "#fff" } = $$props;
	let { color = "#000" } = $$props;
	let { size = "200" } = $$props;
	let { value = "" } = $$props;
	let { padding = 0 } = $$props;
	let { className = "qrcode" } = $$props;

	QRcode.set({
		background,
		foreground: color,
		level: errorCorrection,
		padding,
		size,
		value
	});

	const image = QRcode.toDataURL("image/jpeg");

	$$self.$set = $$props => {
		if ("errorCorrection" in $$props) $$invalidate(2, errorCorrection = $$props.errorCorrection);
		if ("background" in $$props) $$invalidate(3, background = $$props.background);
		if ("color" in $$props) $$invalidate(4, color = $$props.color);
		if ("size" in $$props) $$invalidate(5, size = $$props.size);
		if ("value" in $$props) $$invalidate(6, value = $$props.value);
		if ("padding" in $$props) $$invalidate(7, padding = $$props.padding);
		if ("className" in $$props) $$invalidate(0, className = $$props.className);
	};

	return [className, image, errorCorrection, background, color, size, value, padding];
}

class Lib extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			errorCorrection: 2,
			background: 3,
			color: 4,
			size: 5,
			value: 6,
			padding: 7,
			className: 0
		});
	}
}

export default Lib;
